#!/usr/bin/env python3
"""
–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π Telegram Bot –¥–ª—è USDT Escrow –∏ –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏—Ç–∏–∫–∏
–°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —ç—Å–∫—Ä–æ—É-—Å–¥–µ–ª–æ–∫ –Ω–∞ TRON –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
"""

import os
import logging
import json
import uuid
import sys
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏—Ç–∏–∫–∏
from crypto_api.binance_api.binanceApi import Candles_info_binanceApi, get_binance_funding_rate
from crypto_api.coingeko_api.coingekoApi import CoinGeko_market_cap, CoinGeko_btc_dominance
from crypto_api.yfinance_api.yfinanceApi import Yfinance_get_index_stats
from crypto_api.bybit_api.bybitApi import get_funding_rate, get_long_short_ratio
from crypto_api.alternativeme_api.alternativemeApi import FearGreedAPI

# –ò–º–ø–æ—Ä—Ç –¥–ª—è —ç—Å–∫—Ä–æ—É (–∫–æ–ø–∏—Ä—É–µ–º –∏–∑ —Å–∫—Ä–∏–ø—Ç–æ–≤)
from scripts.tron_escrow_usdt_client import TronEscrowUSDTClient
from binance.client import Client
import time
import qrcode
from io import BytesIO
import base64
import sqlite3

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
class Config:
    def __init__(self):
        self.config = self.load_config()
        
        # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ config)
        self.BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN') or self.config.get('bot', {}).get('token')
        
        if not self.BOT_TOKEN:
            raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω! –£–∫–∞–∂–∏—Ç–µ TELEGRAM_BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ –∏–ª–∏ –≤ config.json")
        
        # TRON –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.NETWORK = self.config.get('settings', {}).get('default_network', 'shasta')
        network_config = self.config.get('networks', {}).get(self.NETWORK, {})
        self.ESCROW_CONTRACT = network_config.get('escrow_contract', "TWHHy4MM95NdRQcWWoJZSQeZg3KmmTsUXt")
        self.USDT_CONTRACT = network_config.get('usdt_contract', "TKZDdu947FtxWHLRKUXnhNZ6bar9RrZ7Wv")
        self.ARBITRATOR_ADDRESS = network_config.get('arbitrator_address', "TBohEWSnePeDFd7k3wn3gKdcP8eTv1vzv2")
        
        # –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.USERS_DATA_FILE = "users_data.json"
        self.PENDING_TRANSACTIONS_FILE = "pending_transactions.json"
        
        # URL –¥–ª—è TronLink –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        self.WEB_APP_URL = self.config.get('bot', {}).get('web_app_url', "https://goodelita1.github.io/tron-escrow-interface/tronlink_interface.html")
        
    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            config_path = os.path.join(os.path.dirname(__file__), '..', 'config.json')
            if os.path.exists(config_path):
                with open(config_path, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return {}

class UnifiedCryptoBot:
    # ================== –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–´ –ò –ö–û–ù–°–¢–ê–ù–¢–´ ==================
    COINS = {
        "eth": "ETHUSDT", "btc": "BTCUSDT", "sol": "SOLUSDT", "xrp": "XRPUSDT",
        "ldo": "LDOUSDT", "atom": "ATOMUSDT", "uni": "UNIUSDT", "near": "NEARUSDT",
        "ltc": "LTCUSDT", "link": "LINKUSDT", "dot": "DOTUSDT", "doge": "DOGEUSDT",
        "avax": "AVAXUSDT", "ape": "APEUSDT", "ada": "ADAUSDT", "op": "OPUSDT",
        "arb": "ARBUSDT", "pol": "POLUSDT", "trx": "TRXUSDT", "bch": "BCHUSDT"
    }
    
    TIMEFRAMES = {
        "15m": (Client.KLINE_INTERVAL_15MINUTE, "15 –º–∏–Ω—É—Ç"),
        "1h": (Client.KLINE_INTERVAL_1HOUR, "1 —á–∞—Å"),
        "4h": (Client.KLINE_INTERVAL_4HOUR, "4 —á–∞—Å–∞"), 
        "1d": (Client.KLINE_INTERVAL_1DAY, "1 –¥–µ–Ω—å"),
        "1w": (Client.KLINE_INTERVAL_1WEEK, "1 –Ω–µ–¥–µ–ª—è"),
        "1m": (Client.KLINE_INTERVAL_1MONTH, "1 –º–µ—Å—è—Ü")
    }
    
    def __init__(self):
        self.config = Config()
        self.users_data = self.load_users_data()
        self.pending_transactions = self.load_pending_transactions()
        self.db_path = os.path.join(os.path.dirname(__file__), 'unified_escrow.db')
        self.user_states = {}  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–µ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        self.init_db()

    def load_users_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            if os.path.exists(self.config.USERS_DATA_FILE):
                with open(self.config.USERS_DATA_FILE, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return {}
    
    def save_users_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            with open(self.config.USERS_DATA_FILE, 'w', encoding='utf-8') as f:
                json.dump(self.users_data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
    
    def load_pending_transactions(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        try:
            if os.path.exists(self.config.PENDING_TRANSACTIONS_FILE):
                with open(self.config.PENDING_TRANSACTIONS_FILE, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–∂–∏–¥–∞—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {e}")
        return {}
    
    def save_pending_transactions(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–∂–∏–¥–∞—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        try:
            with open(self.config.PENDING_TRANSACTIONS_FILE, 'w', encoding='utf-8') as f:
                json.dump(self.pending_transactions, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–∂–∏–¥–∞—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {e}")

    def get_db_conn(self):
        return sqlite3.connect(self.db_path, check_same_thread=False)

    def init_db(self):
        try:
            with self.get_db_conn() as conn:
                cur = conn.cursor()
                cur.execute("""
                    CREATE TABLE IF NOT EXISTS users (
                        id TEXT PRIMARY KEY,
                        username TEXT,
                        first_name TEXT,
                        created_at INTEGER
                    )
                """)
                cur.execute("""
                    CREATE TABLE IF NOT EXISTS transactions (
                        id INTEGER PRIMARY KEY,
                        user_id TEXT NOT NULL,
                        amount_usdt REAL NOT NULL,
                        recipient TEXT NOT NULL,
                        status TEXT NOT NULL,
                        role TEXT NOT NULL,
                        created_at INTEGER NOT NULL
                    )
                """)
                cur.execute("CREATE INDEX IF NOT EXISTS idx_transactions_user ON transactions(user_id)")
                conn.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")

    def db_upsert_user(self, user_id: str, username: str, first_name: str):
        try:
            with self.get_db_conn() as conn:
                cur = conn.cursor()
                cur.execute("""
                    INSERT INTO users (id, username, first_name, created_at)
                    VALUES (?, ?, ?, ?)
                    ON CONFLICT(id) DO UPDATE SET
                        username = excluded.username,
                        first_name = excluded.first_name
                """, (user_id, username, first_name, int(time.time())))
                conn.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: {e}")

    # ================== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ==================
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º –º–µ–Ω—é"""
        user = update.effective_user
        user_id = str(user.id)
        username = user.username or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        first_name = user.first_name or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        self.db_upsert_user(user_id, username, first_name)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in self.users_data:
            self.users_data[user_id] = {
                'username': username,
                'first_name': first_name,
                'created_at': datetime.now().isoformat()
            }
            self.save_users_data()

        keyboard = [
            [InlineKeyboardButton("üí∞ –≠—Å–∫—Ä–æ—É —Å–¥–µ–ª–∫–∏", callback_data='escrow_menu')],
            [InlineKeyboardButton("üìä –ö—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data='crypto_menu')],
            [InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data='my_profile')],
            [InlineKeyboardButton("‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞", callback_data='help')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = (
            f"ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Unified Crypto Bot!\n\n"
            f"üëã –ü—Ä–∏–≤–µ—Ç, {first_name}!\n\n"
            f"üîê **–≠—Å–∫—Ä–æ—É —Å–¥–µ–ª–∫–∏** - –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ P2P —Å–¥–µ–ª–∫–∏ —Å USDT –Ω–∞ TRON\n"
            f"üìà **–ö—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏—Ç–∏–∫–∞** - –¥–∞–Ω–Ω—ã–µ —Å –±–∏—Ä–∂ –∏ –∏–Ω–¥–µ–∫—Å—ã —Ä—ã–Ω–∫–∞\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:"
        )
        
        if update.message:
            await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
        else:
            await update.callback_query.edit_message_text(welcome_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)

    # ================== –≠–°–ö–†–û–£ –ú–ï–ù–Æ ==================
    async def escrow_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é —ç—Å–∫—Ä–æ—É —Ñ—É–Ω–∫—Ü–∏–π"""
        keyboard = [
            [InlineKeyboardButton("üÜï –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É", callback_data='create_escrow')],
            [InlineKeyboardButton("üìã –ú–æ–∏ —Å–¥–µ–ª–∫–∏", callback_data='my_transactions')],
            [InlineKeyboardButton("üîç –°—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏", callback_data='check_transaction')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            "üí∞ **–≠—Å–∫—Ä–æ—É —Å–¥–µ–ª–∫–∏**\n\n"
            f"üåê –°–µ—Ç—å: {self.config.NETWORK}\n"
            f"üìã –ö–æ–Ω—Ç—Ä–∞–∫—Ç: `{self.config.ESCROW_CONTRACT}`\n"
            f"‚öñÔ∏è –ê—Ä–±–∏—Ç—Ä: `{self.config.ARBITRATOR_ADDRESS}`\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        query = update.callback_query
        await query.answer()
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)

    # ================== –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–´ –ò –ö–û–ù–°–¢–ê–ù–¢–´ ==================
    COINS = {
        "eth": "ETHUSDT", "btc": "BTCUSDT", "sol": "SOLUSDT", "xrp": "XRPUSDT",
        "ldo": "LDOUSDT", "atom": "ATOMUSDT", "uni": "UNIUSDT", "near": "NEARUSDT",
        "ltc": "LTCUSDT", "link": "LINKUSDT", "dot": "DOTUSDT", "doge": "DOGEUSDT",
        "avax": "AVAXUSDT", "ape": "APEUSDT", "ada": "ADAUSDT", "op": "OPUSDT",
        "arb": "ARBUSDT", "pol": "POLUSDT", "trx": "TRXUSDT", "bch": "BCHUSDT"
    }
    
    TIMEFRAMES = {
        "15m": (Client.KLINE_INTERVAL_15MINUTE, "15 –º–∏–Ω—É—Ç"),
        "1h": (Client.KLINE_INTERVAL_1HOUR, "1 —á–∞—Å"),
        "4h": (Client.KLINE_INTERVAL_4HOUR, "4 —á–∞—Å–∞"), 
        "1d": (Client.KLINE_INTERVAL_1DAY, "1 –¥–µ–Ω—å"),
        "1w": (Client.KLINE_INTERVAL_1WEEK, "1 –Ω–µ–¥–µ–ª—è"),
        "1m": (Client.KLINE_INTERVAL_1MONTH, "1 –º–µ—Å—è—Ü")
    }
    
    def __init__(self):
        self.config = Config()
        self.users_data = self.load_users_data()
        self.pending_transactions = self.load_pending_transactions()
        self.db_path = os.path.join(os.path.dirname(__file__), 'unified_escrow.db')
        self.user_states = {}  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–µ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        self.init_db()
    
    def create_coins_menu(self):
        """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
        buttons = []
        row = []
        for i, coin in enumerate(self.COINS, start=1):
            row.append(InlineKeyboardButton(coin.upper(), callback_data=f'coin_{coin}'))
            if i % 4 == 0:  # 4 –º–æ–Ω–µ—Ç—ã –≤ —Ä—è–¥
                buttons.append(row)
                row = []
        if row:  # –æ—Å—Ç–∞—Ç–∫–∏
            buttons.append(row)
        buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='crypto_menu')])
        return InlineKeyboardMarkup(buttons)
    
    def create_timeframes_menu(self, coin):
        """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç—ã"""
        buttons = []
        for tf, (_, label) in self.TIMEFRAMES.items():
            buttons.append([InlineKeyboardButton(label, callback_data=f'chart_{coin}_{tf}')])
        buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–æ–Ω–µ—Ç–∞–º", callback_data='coins_chart_menu')])
        return InlineKeyboardMarkup(buttons)
    
    def create_funding_coins_menu(self):
        """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–æ–Ω–µ—Ç –¥–ª—è funding rates"""
        buttons = []
        row = []
        for i, coin in enumerate(self.COINS, start=1):
            row.append(InlineKeyboardButton(coin.upper(), callback_data=f'funding_{coin}'))
            if i % 4 == 0:
                buttons.append(row)
                row = []
        if row:
            buttons.append(row)
        buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='crypto_menu')])
        return InlineKeyboardMarkup(buttons)
        
    def create_longshort_coins_menu(self):
        """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–æ–Ω–µ—Ç –¥–ª—è long/short ratio"""
        buttons = []
        row = []
        for i, coin in enumerate(self.COINS, start=1):
            row.append(InlineKeyboardButton(coin.upper(), callback_data=f'longshort_{coin}'))
            if i % 4 == 0:
                buttons.append(row)
                row = []
        if row:
            buttons.append(row)
        buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='crypto_menu')])
        return InlineKeyboardMarkup(buttons)

    # ================== –ö–†–ò–ü–¢–û–ê–ù–ê–õ–ò–¢–ò–ö–ê –ú–ï–ù–Æ ==================
    async def crypto_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        keyboard = [
            [InlineKeyboardButton("üìà –ì—Ä–∞—Ñ–∏–∫–∏ –º–æ–Ω–µ—Ç", callback_data='coins_chart_menu')],
            [InlineKeyboardButton("‚Çø BTC Dominance", callback_data='btc_dominance')],
            [InlineKeyboardButton("üî• Fear & Greed", callback_data='fear_greed')],
            [InlineKeyboardButton("üìä –§–æ–Ω–¥–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã", callback_data='stock_indexes')],
            [InlineKeyboardButton("üíπ Funding Rates", callback_data='funding_rates_menu')],
            [InlineKeyboardButton("‚öñÔ∏è Long/Short Ratio", callback_data='longshort_menu')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            "üìä **–ö—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏—Ç–∏–∫–∞**\n\n"
            "üî∏ **–ì—Ä–∞—Ñ–∏–∫–∏ –º–æ–Ω–µ—Ç** - 20 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, 6 —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤\n"
            "üî∏ **BTC Dominance** - –¥–æ–º–∏–Ω–∞—Ü–∏—è Bitcoin\n" 
            "üî∏ **Fear & Greed** - –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏\n"
            "üî∏ **–§–æ–Ω–¥–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã** - S&P 500, NASDAQ –∏ –¥—Ä.\n"
            "üî∏ **Funding Rates** - —Å—Ç–∞–≤–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è\n"
            "üî∏ **Long/Short Ratio** - —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
        )
        
        query = update.callback_query
        await query.answer()
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)

    # ================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–†–ò–ü–¢–û–ê–ù–ê–õ–ò–¢–ò–ö–ò ==================
    async def btc_dominance_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ BTC –¥–æ–º–∏–Ω–∞—Ü–∏–∏"""
        query = update.callback_query
        await query.answer()
        
        try:
            response = CoinGeko_btc_dominance()
            text = f"‚Çø **Bitcoin Dominance**\n\n{response}"
        except Exception as e:
            text = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–Ω–∞–ª–∏–∑—É", callback_data='crypto_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)

    async def fear_greed_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ Fear & Greed Index"""
        query = update.callback_query
        await query.answer()
        
        try:
            text = FearGreedAPI.get_index()
        except Exception as e:
            text = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}"
        
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–Ω–∞–ª–∏–∑—É", callback_data='crypto_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)

    async def stock_indexes_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ–Ω–¥–æ–≤—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        try:
            response = Yfinance_get_index_stats('1d')
            text = f"üìä **–§–æ–Ω–¥–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã (1 –¥–µ–Ω—å)**\n\n{response}"
        except Exception as e:
            text = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}"
        
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–Ω–∞–ª–∏–∑—É", callback_data='crypto_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)

    # ================== FUNDING RATES –î–õ–Ø –í–°–ï–• –ú–û–ù–ï–¢ ==================
    async def funding_rates_menu_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–æ–Ω–µ—Ç –¥–ª—è funding rates"""
        query = update.callback_query
        await query.answer()
        
        text = (
            "üíπ **Funding Rates**\n\n"
            "üî∏ –î–∞–Ω–Ω—ã–µ —Å Binance –∏ Bybit\n"
            "üî∏ 20 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –¥–æ—Å—Ç—É–ø–Ω—ã\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É:"
        )
        
        reply_markup = self.create_funding_coins_menu()
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    
    async def funding_coin_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ funding rate –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç—ã"""
        query = update.callback_query
        data = query.data
        coin = data.split('_')[1]  # funding_btc -> btc
        
        await query.answer()
        
        if coin not in self.COINS:
            await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–Ω–µ—Ç–∞")
            return
        
        try:
            symbol = self.COINS[coin]
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –æ–±–µ–∏—Ö –±–∏—Ä–∂
            binance_result = get_binance_funding_rate(symbol, 1)
            bybit_result = get_funding_rate(symbol)
            
            text = (
                f"üíπ **{coin.upper()} Funding Rates**\n\n"
                f"üî∏ **Binance:**\n{binance_result}\n\n"
                f"üî∏ **Bybit:**\n{bybit_result}"
            )
        except Exception as e:
            text = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}"
        
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ funding", callback_data='funding_rates_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    
    # ================== LONG/SHORT RATIO –î–õ–Ø –í–°–ï–• –ú–û–ù–ï–¢ ==================
    async def longshort_menu_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–æ–Ω–µ—Ç –¥–ª—è long/short ratio"""
        query = update.callback_query
        await query.answer()
        
        text = (
            "‚öñÔ∏è **Long/Short Ratio**\n\n"
            "üî∏ –î–∞–Ω–Ω—ã–µ —Å Bybit\n"
            "üî∏ 20 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –¥–æ—Å—Ç—É–ø–Ω—ã\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É:"
        )
        
        reply_markup = self.create_longshort_coins_menu()
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    
    async def longshort_coin_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ long/short ratio –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç—ã"""
        query = update.callback_query
        data = query.data
        coin = data.split('_')[1]  # longshort_btc -> btc
        
        await query.answer()
        
        if coin not in self.COINS:
            await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–Ω–µ—Ç–∞")
            return
        
        try:
            symbol = self.COINS[coin]
            
            # –ü–æ–ª—É—á–∞–µ–º long/short ratio —Å Bybit
            response = get_long_short_ratio(symbol, "1h", "linear")
            
            text = f"‚öñÔ∏è **{coin.upper()} Long/Short Ratio**\n\n{response}"
        except Exception as e:
            text = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}"
        
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ long/short", callback_data='longshort_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)

    # ================== –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ú–û–ù–ï–¢ ==================
    async def coins_chart_menu_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        text = (
            "üìà **–ì—Ä–∞—Ñ–∏–∫–∏ –º–æ–Ω–µ—Ç**\n\n"
            "üî∏ 20 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –¥–æ—Å—Ç—É–ø–Ω—ã\n"
            "üî∏ 6 –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:"
        )
        
        reply_markup = self.create_coins_menu()
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    
    async def coin_timeframes_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç—ã"""
        query = update.callback_query
        data = query.data
        coin = data.split('_')[1]  # coin_eth -> eth
        
        await query.answer()
        
        if coin not in self.COINS:
            await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–Ω–µ—Ç–∞")
            return
        
        text = (
            f"üìà **{coin.upper()} - –ì—Ä–∞—Ñ–∏–∫–∏**\n\n"
            f"–¢–∏–∫–µ—Ä: `{self.COINS[coin]}`\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª:"
        )
        
        reply_markup = self.create_timeframes_menu(coin)
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    
    async def chart_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç—ã"""
        query = update.callback_query
        data = query.data
        _, coin, timeframe = data.split('_', 2)  # chart_eth_1h -> ['chart', 'eth', '1h']
        
        await query.answer()
        
        if coin not in self.COINS or timeframe not in self.TIMEFRAMES:
            await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            return
        
        try:
            symbol = self.COINS[coin]
            interval, timeframe_label = self.TIMEFRAMES[timeframe]
            
            response = Candles_info_binanceApi(interval, symbol, 1)
            text = f"üìà **{coin.upper()} ({timeframe_label})**\n\n{response}"
        except Exception as e:
            text = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}"
        
        keyboard = [[InlineKeyboardButton(f"‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ {coin.upper()}", callback_data=f'coin_{coin}')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)

    # ================== –ü–†–û–°–¢–´–ï –≠–°–ö–†–û–£ –§–£–ù–ö–¶–ò–ò (–∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞) ==================
    async def create_escrow_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —ç—Å–∫—Ä–æ—É —Å–¥–µ–ª–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        transaction_id = str(uuid.uuid4())
        
        keyboard = [
            [InlineKeyboardButton("üí≥ –ü–æ–¥–ø–∏—Å–∞—Ç—å —á–µ—Ä–µ–∑ TronLink", 
                                web_app=WebAppInfo(url=self.config.WEB_APP_URL))],
            [InlineKeyboardButton("üìù –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f'check_tx_status_{transaction_id}')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='escrow_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            "üÜï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏**\n\n"
            f"üÜî ID —Å–¥–µ–ª–∫–∏: `{transaction_id}`\n\n"
            "üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n"
            "1. –ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥–ø–∏—Å–∞—Ç—å —á–µ—Ä–µ–∑ TronLink'\n"
            "2. –í –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è –æ–∫–Ω–µ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏\n"
            "3. –ü–æ–¥–ø–∏—à–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ TronLink\n"
            "4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏\n\n"
            "‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω TronLink!"
        )
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)

    async def my_transactions_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–¥–µ–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        query = update.callback_query
        await query.answer()
        
        user_id = str(update.effective_user.id)
        
        try:
            with self.get_db_conn() as conn:
                cur = conn.cursor()
                cur.execute("SELECT * FROM transactions WHERE user_id = ? ORDER BY created_at DESC LIMIT 10", (user_id,))
                transactions = cur.fetchall()
                
            if not transactions:
                text = "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫."
            else:
                text = "üìã **–í–∞—à–∏ —Å–¥–µ–ª–∫–∏:**\n\n"
                for tx in transactions:
                    tx_id, _, amount, recipient, status, role, created_at = tx
                    created_date = datetime.fromtimestamp(created_at).strftime("%Y-%m-%d %H:%M")
                    text += (
                        f"üÜî ID: {tx_id}\n"
                        f"üí∞ –°—É–º–º–∞: {amount} USDT\n"
                        f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {recipient[:10]}...\n"
                        f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
                        f"üé≠ –†–æ–ª—å: {role}\n"
                        f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {created_date}\n\n"
                    )
                    
        except Exception as e:
            text = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}"
            
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='escrow_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)

    # ================== NAVIGATION HANDLERS ==================
    async def back_to_main_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await self.start_command(update, context)

    async def my_profile_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        query = update.callback_query
        await query.answer()
        
        user = update.effective_user
        user_id = str(user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            with self.get_db_conn() as conn:
                cur = conn.cursor()
                cur.execute("SELECT COUNT(*) FROM transactions WHERE user_id = ?", (user_id,))
                tx_count = cur.fetchone()[0]
                
        except:
            tx_count = 0
            
        text = (
            f"üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**\n\n"
            f"üÜî ID: `{user.id}`\n"
            f"üë§ –ò–º—è: {user.first_name or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
            f"üìß Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üìä –°–¥–µ–ª–æ–∫: {tx_count}\n"
            f"üåê –°–µ—Ç—å: {self.config.NETWORK}\n"
        )
        
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)

    async def help_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–ø—Ä–∞–≤–∫–∞"""
        query = update.callback_query
        await query.answer()
        
        text = (
            "‚ÑπÔ∏è **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É**\n\n"
            "**üí∞ –≠—Å–∫—Ä–æ—É —Å–¥–µ–ª–∫–∏:**\n"
            "‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ P2P —Å–¥–µ–ª–∫–∏ —Å USDT\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–∞ TRON\n"
            "‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å TronLink –∫–æ—à–µ–ª—å–∫–æ–º\n\n"
            "**üìä –ö—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏—Ç–∏–∫–∞:**\n"
            "‚Ä¢ Bitcoin –¥–æ–º–∏–Ω–∞—Ü–∏—è (CoinGecko)\n"
            "‚Ä¢ –î–∞–Ω–Ω—ã–µ –ø–æ Ethereum (Binance)\n"
            "‚Ä¢ Fear & Greed Index\n"
            "‚Ä¢ –§–æ–Ω–¥–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã (Yahoo Finance)\n"
            "‚Ä¢ Funding rates (Binance, Bybit)\n"
            "‚Ä¢ Long/Short —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è\n\n"
            "**üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**\n"
            "‚Ä¢ –ë–æ—Ç—É –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏\n"
            "‚Ä¢ –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ TronLink\n"
            "‚Ä¢ –î–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ\n\n"
            "‚ùì –í–æ–ø—Ä–æ—Å—ã? –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
        
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)

    # ================== CALLBACK QUERY ROUTER ==================
    async def callback_query_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–ª–∞–≤–Ω—ã–π —Ä–æ—É—Ç–µ—Ä callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        data = query.data
        
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ callback: {data}")
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        if data == 'back_to_main':
            await self.back_to_main_handler(update, context)
        elif data == 'my_profile':
            await self.my_profile_handler(update, context)
        elif data == 'help':
            await self.help_handler(update, context)
            
        # –ì–ª–∞–≤–Ω—ã–µ –º–µ–Ω—é
        elif data == 'escrow_menu':
            await self.escrow_menu(update, context)
        elif data == 'crypto_menu':
            await self.crypto_menu(update, context)
            
        # –≠—Å–∫—Ä–æ—É —Ñ—É–Ω–∫—Ü–∏–∏
        elif data == 'create_escrow':
            await self.create_escrow_handler(update, context)
        elif data == 'my_transactions':
            await self.my_transactions_handler(update, context)
            
        # –ö—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ - –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        elif data == 'btc_dominance':
            await self.btc_dominance_handler(update, context)
        elif data == 'fear_greed':
            await self.fear_greed_handler(update, context)
        elif data == 'stock_indexes':
            await self.stock_indexes_handler(update, context)
            
        # –ì—Ä–∞—Ñ–∏–∫–∏ –º–æ–Ω–µ—Ç
        elif data == 'coins_chart_menu':
            await self.coins_chart_menu_handler(update, context)
        elif data.startswith('coin_'):
            await self.coin_timeframes_handler(update, context) 
        elif data.startswith('chart_'):
            await self.chart_handler(update, context)
            
        # Funding rates –¥–ª—è –≤—Å–µ—Ö –º–æ–Ω–µ—Ç
        elif data == 'funding_rates_menu':
            await self.funding_rates_menu_handler(update, context)
        elif data.startswith('funding_') and data != 'funding_rates_menu':
            await self.funding_coin_handler(update, context)
            
        # Long/Short ratio –¥–ª—è –≤—Å–µ—Ö –º–æ–Ω–µ—Ç
        elif data == 'longshort_menu':
            await self.longshort_menu_handler(update, context)
        elif data.startswith('longshort_'):
            await self.longshort_coin_handler(update, context)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
        elif data.startswith('check_tx_status_'):
            await query.answer()
            tx_id = data.replace('check_tx_status_', '')
            text = (
                f"üîç **–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–¥–µ–ª–∫–∏**\n\n"
                f"üÜî ID: `{tx_id}`\n"
                f"üìä –°—Ç–∞—Ç—É—Å: –í –æ–∂–∏–¥–∞–Ω–∏–∏\n\n"
                f"üí° –§—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ TRON –∫–ª–∏–µ–Ω—Ç–∞."
            )
            keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —ç—Å–∫—Ä–æ—É", callback_data='escrow_menu')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
        
        else:
            await query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ Unified Crypto & Escrow Bot...")
    
    try:
        bot = UnifiedCryptoBot()
        print(f"üìã –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω")
        print(f"üåê –°–µ—Ç—å TRON: {bot.config.NETWORK}")
        print(f"üìã –ö–æ–Ω—Ç—Ä–∞–∫—Ç: {bot.config.ESCROW_CONTRACT}")
        print(f"‚öñÔ∏è –ê—Ä–±–∏—Ç—Ä: {bot.config.ARBITRATOR_ADDRESS}")
        print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º!")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(bot.config.BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", bot.start_command))
        application.add_handler(CallbackQueryHandler(bot.callback_query_handler))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling(allowed_updates=Update.ALL_TYPES)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        raise

if __name__ == "__main__":
    main()