#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ
"""

import json
import os
from tronapi import Tron
from tronapi.providers.http import HttpProvider
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    config_path = os.path.join(os.path.dirname(__file__), '..', 'config.json')
    with open(config_path, 'r') as f:
        return json.load(f)

def check_all_transactions():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ"""
    config = load_config()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∏
    network = config.get('settings', {}).get('default_network', 'shasta')
    network_config = config.get('networks', {}).get(network, {})
    
    contract_address = network_config.get('escrow_contract')
    print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç: {contract_address}")
    print(f"üåê –°–µ—Ç—å: {network}")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    if network == 'mainnet':
        provider_url = "https://api.trongrid.io"
    elif network == 'shasta':
        provider_url = "https://api.shasta.trongrid.io"
    elif network == 'nile':
        provider_url = "https://nile.trongrid.io"
    else:
        raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–µ—Ç—å: {network}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Tron API
    tron = Tron()
    tron.set_http_provider(provider_url)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        result = tron.trx.trigger_smart_contract(
            contract_address,
            "transactionCount()",
            "",
            "",
            ""
        )
        
        if not result.get('result', {}).get('result'):
            print("‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ transactionCount")
            return
            
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (hex -> int)
        count_hex = result['constant_result'][0]
        count = int(count_hex, 16) if count_hex else 0
        
        print(f"üìä –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ: {count}")
        
        if count == 0:
            print("‚ÑπÔ∏è  –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ—Ç")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        for tx_id in range(count):
            print(f"\nüîç –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {tx_id}:")
            
            # –í—ã–∑—ã–≤–∞–µ–º getTransaction
            result = tron.trx.trigger_smart_contract(
                contract_address,
                "getTransaction(uint256)",
                f"{tx_id:064x}",  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ hex —Å –Ω—É–ª—è–º–∏ —Å–ª–µ–≤–∞
                "",
                ""
            )
            
            if not result.get('result', {}).get('result'):
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {tx_id}")
                continue
                
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            constant_result = result['constant_result'][0]
            
            if not constant_result or len(constant_result) < 64*8:  # 8 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ 64 —Å–∏–º–≤–æ–ª–∞
                print(f"  ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {tx_id}")
                continue
                
            # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (8 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
            sender = "T" + tron.toBase58Check("41" + constant_result[24:64])  # address sender
            recipient = "T" + tron.toBase58Check("41" + constant_result[88:128])  # address recipient
            amount = int(constant_result[128:192], 16)  # uint256 amount
            state = int(constant_result[192:256], 16)  # State state
            created_at = int(constant_result[256:320], 16)  # uint256 createdAt
            deadline = int(constant_result[320:384], 16)  # uint256 deadline
            sender_approved = bool(int(constant_result[384:448], 16))  # bool senderApproved
            recipient_approved = bool(int(constant_result[448:512], 16))  # bool recipientApproved
            
            # –ù–∞–∑–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
            state_names = {
                0: "AWAITING_PAYMENT",
                1: "AWAITING_DELIVERY", 
                2: "COMPLETE",
                3: "DISPUTED",
                4: "REFUNDED"
            }
            
            print(f"  üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender}")
            print(f"  üì® –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {recipient}")
            print(f"  üí∞ –°—É–º–º–∞: {amount / 1000000:.6f} USDT")
            print(f"  üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ: {state_names.get(state, f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ ({state})')}")
            print(f"  ‚è∞ –°–æ–∑–¥–∞–Ω–æ: {created_at} (timestamp)")
            print(f"  ‚è≥ –î–µ–¥–ª–∞–π–Ω: {deadline} (timestamp)")
            print(f"  ‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª: {sender_approved}")
            print(f"  ‚úÖ –ü–æ–ª—É—á–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª: {recipient_approved}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    check_all_transactions()