#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –±–ª–æ–∫—á–µ–π–Ω–æ–º
–£–¥–∞–ª—è–µ—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞
"""

import os
import json
import sqlite3
from datetime import datetime
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

from scripts.tron_escrow_usdt_client import TronEscrowUSDTClient

class DataCleaner:
    def __init__(self):
        self.root_dir = os.path.dirname(os.path.dirname(__file__))
        self.users_data_file = os.path.join(self.root_dir, 'users_data.json')
        self.scripts_users_data_file = os.path.join(self.root_dir, 'scripts', 'users_data.json')
        self.pending_transactions_file = os.path.join(self.root_dir, 'scripts', 'pending_transactions.json')
        self.db_path = os.path.join(self.root_dir, 'bots', 'unified_escrow.db')
        
        # –°–æ–∑–¥–∞–µ–º TRON –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫—á–µ–π–Ω–∞
        self.client = TronEscrowUSDTClient()
        
    def load_json_file(self, filepath):
        """–ó–∞–≥—Ä—É–∑–∫–∞ JSON —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(filepath):
                with open(filepath, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filepath}: {e}")
        return {}
    
    def save_json_file(self, filepath, data):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ JSON —Ñ–∞–π–ª–∞"""
        try:
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω {filepath}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {filepath}: {e}")
    
    def get_blockchain_transaction_ids(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞"""
        try:
            tx_count = self.client.get_transaction_count()
            if tx_count is None:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞")
                return set()
            
            valid_ids = set()
            for tx_id in range(tx_count):
                tx_info = self.client.get_transaction(tx_id)
                if tx_info:
                    valid_ids.add(tx_id)
            
            print(f"üîó –ù–∞–π–¥–µ–Ω–æ {len(valid_ids)} —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –±–ª–æ–∫—á–µ–π–Ω–µ: {sorted(valid_ids)}")
            return valid_ids
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫—á–µ–π–Ω–∞: {e}")
            return set()
    
    def cleanup_scripts_users_data(self, valid_tx_ids):
        """–û—á–∏—Å—Ç–∫–∞ scripts/users_data.json –æ—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        print("\nüßπ –û—á–∏—Å—Ç–∫–∞ scripts/users_data.json...")
        
        data = self.load_json_file(self.scripts_users_data_file)
        if not data:
            print("üìÅ –§–∞–π–ª scripts/users_data.json –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
        
        cleaned = False
        
        for user_id, user_data in data.items():
            if 'transactions' in user_data:
                original_count = len(user_data['transactions'])
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                valid_transactions = []
                invalid_transactions = []
                
                for tx in user_data['transactions']:
                    tx_id = tx.get('id')
                    if tx_id in valid_tx_ids:
                        valid_transactions.append(tx)
                        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é ID {tx_id}")
                    else:
                        invalid_transactions.append(tx)
                        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: —É–¥–∞–ª—è–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é ID {tx_id}")
                
                user_data['transactions'] = valid_transactions
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                user_data['transactions_created'] = len(valid_transactions)
                
                if len(invalid_transactions) > 0:
                    cleaned = True
                    print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ {len(invalid_transactions)} –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        if cleaned:
            # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
            backup_file = self.scripts_users_data_file + '.backup.' + datetime.now().strftime('%Y%m%d_%H%M%S')
            self.save_json_file(backup_file, self.load_json_file(self.scripts_users_data_file))
            print(f"üíæ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: {os.path.basename(backup_file)}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            self.save_json_file(self.scripts_users_data_file, data)
            print("‚úÖ scripts/users_data.json –æ—á–∏—â–µ–Ω –∏ –æ–±–Ω–æ–≤–ª–µ–Ω")
        else:
            print("‚úÖ scripts/users_data.json –Ω–µ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –æ—á–∏—Å—Ç–∫–µ")
    
    def cleanup_database(self, valid_tx_ids):
        """–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        print("\nüßπ –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            conn = sqlite3.connect(self.db_path)
            cur = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ –ë–î
            cur.execute("SELECT id, user_id, amount_usdt, recipient FROM transactions")
            db_transactions = cur.fetchall()
            
            if not db_transactions:
                print("üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞")
                conn.close()
                return
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(db_transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            
            # –ù–∞—Ö–æ–¥–∏–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            invalid_tx_ids = []
            for tx in db_transactions:
                tx_id, user_id, amount, recipient = tx
                if tx_id not in valid_tx_ids:
                    invalid_tx_ids.append(tx_id)
                    print(f"‚ùå –ù–∞–π–¥–µ–Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤ –ë–î: ID {tx_id} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id})")
                else:
                    print(f"‚úÖ –í–∞–ª–∏–¥–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤ –ë–î: ID {tx_id}")
            
            # –£–¥–∞–ª—è–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            if invalid_tx_ids:
                placeholders = ','.join('?' * len(invalid_tx_ids))
                cur.execute(f"DELETE FROM transactions WHERE id IN ({placeholders})", invalid_tx_ids)
                conn.commit()
                print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ {len(invalid_tx_ids)} –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑ –ë–î")
            else:
                print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –æ—á–∏—Å—Ç–∫–µ")
            
            conn.close()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def cleanup_pending_transactions(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–∂–∏–¥–∞—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)"""
        print("\nüßπ –û—á–∏—Å—Ç–∫–∞ pending_transactions.json...")
        
        data = self.load_json_file(self.pending_transactions_file)
        if not data:
            print("üìÅ –§–∞–π–ª pending_transactions.json –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
        
        current_time = int(datetime.now().timestamp())
        cleaned_data = {}
        removed_count = 0
        
        for tx_uuid, tx_data in data.items():
            created_at = tx_data.get('created_at', 0)
            age_hours = (current_time - created_at) / 3600
            
            if age_hours > 24:  # –°—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
                print(f"‚ùå –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –æ–∂–∏–¥–∞—é—â—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é {tx_uuid} (–≤–æ–∑—Ä–∞—Å—Ç: {age_hours:.1f} —á–∞—Å–æ–≤)")
                removed_count += 1
            else:
                cleaned_data[tx_uuid] = tx_data
                print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–∂–∏–¥–∞—é—â—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é {tx_uuid} (–≤–æ–∑—Ä–∞—Å—Ç: {age_hours:.1f} —á–∞—Å–æ–≤)")
        
        if removed_count > 0:
            self.save_json_file(self.pending_transactions_file, cleaned_data)
            print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ {removed_count} —Å—Ç–∞—Ä—ã—Ö –æ–∂–∏–¥–∞—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
        else:
            print("‚úÖ pending_transactions.json –Ω–µ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –æ—á–∏—Å—Ç–∫–µ")
    
    def print_summary(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É"""
        print("\n" + "="*60)
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê –ü–û–°–õ–ï –û–ß–ò–°–¢–ö–ò")
        print("="*60)
        
        # –ë–ª–æ–∫—á–µ–π–Ω
        try:
            tx_count = self.client.get_transaction_count()
            print(f"üîó –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –±–ª–æ–∫—á–µ–π–Ω–µ: {tx_count}")
        except:
            print("üîó –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –±–ª–æ–∫—á–µ–π–Ω–µ: ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏")
        
        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        try:
            conn = sqlite3.connect(self.db_path)
            cur = conn.cursor()
            cur.execute("SELECT COUNT(*) FROM transactions")
            db_count = cur.fetchone()[0]
            cur.execute("SELECT COUNT(*) FROM users")
            users_count = cur.fetchone()[0]
            conn.close()
            print(f"üíæ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –ë–î: {db_count}")
            print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î: {users_count}")
        except:
            print("üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è")
        
        # JSON —Ñ–∞–π–ª—ã
        scripts_data = self.load_json_file(self.scripts_users_data_file)
        pending_data = self.load_json_file(self.pending_transactions_file)
        
        total_local_tx = 0
        for user_data in scripts_data.values():
            total_local_tx += len(user_data.get('transactions', []))
        
        print(f"üìÅ –õ–æ–∫–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {total_local_tx}")
        print(f"‚è≥ –û–∂–∏–¥–∞—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(pending_data)}")
        
        print("="*60)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏"""
        print("üöÄ –ù–ê–ß–ê–õ–û –û–ß–ò–°–¢–ö–ò –ò –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –î–ê–ù–ù–´–•")
        print("="*60)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ ID –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞
        valid_tx_ids = self.get_blockchain_transaction_ids()
        
        if not valid_tx_ids:
            print("‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –±–ª–æ–∫—á–µ–π–Ω–µ. –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            return
        
        # –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        self.cleanup_scripts_users_data(valid_tx_ids)
        self.cleanup_database(valid_tx_ids)
        self.cleanup_pending_transactions()
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
        self.print_summary()
        
        print("\n‚úÖ –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")

def main():
    cleaner = DataCleaner()
    cleaner.run()

if __name__ == "__main__":
    main()