#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ pending —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –±–ª–æ–∫—á–µ–π–Ω–æ–º
"""

import json
import sqlite3
import time
from datetime import datetime
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ scripts
script_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.append(script_dir)

from tron_escrow_usdt_client import TronEscrowUSDTClient
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞
class Config:
    def __init__(self):
        self.config = self.load_config()
        
        # TRON –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.NETWORK = self.config.get('settings', {}).get('default_network', 'shasta')
        network_config = self.config.get('networks', {}).get(self.NETWORK, {})
        self.ESCROW_CONTRACT = network_config.get('escrow_contract', "TB7qTmS58rPHH3N1CahLGfAnm5EsSbCMsu")
        self.USDT_CONTRACT = network_config.get('usdt_contract', "TKZDdu947FtxWHLRKUXnhNZ6bar9RrZ7Wv")
        self.ARBITRATOR_ADDRESS = network_config.get('arbitrator_address', "TBohEWSnePeDFd7k3wn3gKdcP8eTv1vzv2")
        
        # –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        project_root = os.path.dirname(script_dir)
        self.USERS_DATA_FILE = os.path.join(project_root, "users_data.json")
        self.PENDING_TRANSACTIONS_FILE = os.path.join(project_root, "pending_transactions.json")
        
    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            config_path = os.path.join(os.path.dirname(__file__), '..', 'config.json')
            if os.path.exists(config_path):
                with open(config_path, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return {}

def sync_pending_transactions():
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è pending —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –±–ª–æ–∫—á–µ–π–Ω–æ–º"""
    config = Config()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º pending —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    pending_file = config.PENDING_TRANSACTIONS_FILE
    if not os.path.exists(pending_file):
        print("‚ùå –§–∞–π–ª pending —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    with open(pending_file, 'r', encoding='utf-8') as f:
        pending_transactions = json.load(f)
    
    if not pending_transactions:
        print("‚úÖ –ù–µ—Ç pending —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
        return
    
    print(f"üîÑ –ù–∞–π–¥–µ–Ω–æ {len(pending_transactions)} pending —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è –±–ª–æ–∫—á–µ–π–Ω–∞
    try:
        client = TronEscrowUSDTClient(
            private_key="0000000000000000000000000000000000000000000000000000000000000001",  # Dummy key –¥–ª—è —á—Ç–µ–Ω–∏—è
            contract_address=config.ESCROW_CONTRACT,
            network=config.NETWORK
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –±–ª–æ–∫—á–µ–π–Ω–µ
        total_transactions = client.get_transaction_count()
        print(f"üìä –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –±–ª–æ–∫—á–µ–π–Ω–µ: {total_transactions}")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_path = os.path.join(os.path.dirname(__file__), '..', 'bots', 'unified_escrow.db')
        conn = sqlite3.connect(db_path)
        cur = conn.cursor()
        
        synced_count = 0
        
        for uuid, tx_data in list(pending_transactions.items()):
            user_id = tx_data.get('user_id')
            amount = tx_data.get('data', {}).get('amount', 0)
            recipient = tx_data.get('data', {}).get('recipient', '')
            created_at = tx_data.get('created_at', int(time.time()))
            
            print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º UUID: {uuid}")
            print(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
            print(f"   üí∞ –°—É–º–º–∞: {amount} USDT")
            print(f"   üì® –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {recipient}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ, –Ω–∞—á–∏–Ω–∞—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π
            found_blockchain_id = None
            
            for blockchain_id in range(total_transactions - 1, -1, -1):
                try:
                    tx_info = client.get_transaction(blockchain_id)
                    if not tx_info:
                        continue
                        
                    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                    blockchain_recipient = tx_info.get('recipient', '')
                    blockchain_amount = tx_info.get('amount', 0) / 1000000  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –º–∏–∫—Ä–æ-USDT
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—é –∏ —Å—Ç–∞—Ç—É—Å—É AWAITING_DELIVERY
                    # (–ü–æ—Å–∫–æ–ª—å–∫—É amount —á–∞—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç 0 –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ)
                    tx_state = tx_info.get('state', '')
                    if (blockchain_recipient.lower() == recipient.lower() and 
                        tx_state == 'AWAITING_DELIVERY' and blockchain_id >= total_transactions - 10):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                        found_blockchain_id = blockchain_id
                        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ —Å ID: {blockchain_id}")
                        print(f"   üìä –°—Ç–∞—Ç—É—Å: {tx_info.get('state', 'Unknown')}")
                        break
                        
                except Exception as e:
                    print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {blockchain_id}: {e}")
                    continue
            
            if found_blockchain_id is not None:
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                try:
                    cur.execute("""
                        INSERT OR REPLACE INTO transactions (id, user_id, amount_usdt, recipient, status, role, created_at, uuid)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                    """, (found_blockchain_id, user_id, amount, recipient, 'AWAITING_DELIVERY', 'creator', created_at, uuid))
                    
                    # –£–¥–∞–ª—è–µ–º –∏–∑ pending
                    del pending_transactions[uuid]
                    synced_count += 1
                    
                    print(f"   üéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ! UUID {uuid} -> Blockchain ID {found_blockchain_id}")
                    
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î: {e}")
            else:
                print(f"   ‚è≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        conn.close()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª pending —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        with open(pending_file, 'w', encoding='utf-8') as f:
            json.dump(pending_transactions, f, ensure_ascii=False, indent=2)
        
        print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:")
        print(f"   ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {synced_count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
        print(f"   ‚è≥ –û—Å—Ç–∞–ª–æ—Å—å pending: {len(pending_transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ pending —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –±–ª–æ–∫—á–µ–π–Ω–æ–º...")
    sync_pending_transactions()
    print("‚ú® –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")