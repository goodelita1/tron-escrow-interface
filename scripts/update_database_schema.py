#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª–µ uuid –¥–ª—è —Å–≤—è–∑–∏ –º–µ–∂–¥—É bot UUID –∏ blockchain ID
"""

import sqlite3
import os
import sys

def update_database_schema():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    # –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_path = os.path.join(os.path.dirname(__file__), '..', 'bots', 'unified_escrow.db')
    
    print("üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    print(f"üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_path}")
    
    try:
        conn = sqlite3.connect(db_path)
        cur = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ö–µ–º—É
        cur.execute("PRAGMA table_info(transactions)")
        columns = cur.fetchall()
        
        print("\nüìä –¢–µ–∫—É—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ transactions:")
        for col in columns:
            print(f"  - {col[1]} ({col[2]})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–æ–ª–æ–Ω–∫–∞ uuid
        column_names = [col[1] for col in columns]
        if 'uuid' in column_names:
            print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ 'uuid' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print("\nüÜï –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É 'uuid'...")
            cur.execute("ALTER TABLE transactions ADD COLUMN uuid TEXT")
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ UUID
            print("üìá –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è UUID...")
            cur.execute("CREATE INDEX IF NOT EXISTS idx_transactions_uuid ON transactions(uuid)")
            
            conn.commit()
            print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ 'uuid' –¥–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ö–µ–º—É
        cur.execute("PRAGMA table_info(transactions)")
        updated_columns = cur.fetchall()
        
        print("\nüìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ö–µ–º–∞ —Ç–∞–±–ª–∏—Ü—ã transactions:")
        for col in updated_columns:
            print(f"  - {col[1]} ({col[2]})" + (" [–ù–û–í–û–ï]" if col[1] == 'uuid' else ""))
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
        cur.execute("PRAGMA index_list(transactions)")
        indexes = cur.fetchall()
        
        print("\nüìá –ò–Ω–¥–µ–∫—Å—ã:")
        for idx in indexes:
            print(f"  - {idx[1]}")
        
        conn.close()
        print("\n‚úÖ –°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã: {e}")
        return False
    
    return True

def main():
    print("üöÄ –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–•–ï–ú–´ –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    success = update_database_schema()
    
    if success:
        print("\nüéâ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–≤—è–∑—ã–≤–∞—Ç—å UUID —Å blockchain ID")
    else:
        print("\nüí• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")

if __name__ == "__main__":
    main()